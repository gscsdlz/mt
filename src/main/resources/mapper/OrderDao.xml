<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mt.dao.OrderDao">

    <select id="getAllOrderByUser" resultType="Order">
        SELECT m_order.*, m_account.username, m_store.store_name, m_store.store_img
        FROM m_order
                 LEFT JOIN m_account ON (m_order.account_id = m_account.id)
                 LEFT JOIN m_store ON (m_order.store_id = m_store.id)
        WHERE account_id = #{account_id}
        LIMIT ${offset}, ${limit}
    </select>

    <select id="getAllOrder" resultType="Order">
        SELECT m_order.*, m_account.username, m_store.store_name, m_store.store_img
        FROM m_order
                 LEFT JOIN m_account ON (m_order.account_id = m_account.id)
                 LEFT JOIN m_store ON (m_order.store_id = m_store.id)
        WHERE order_status != 5
        LIMIT ${offset}, ${limit}
    </select>

    <select id="getAllOrderByStore" resultType="Order">
        SELECT *
        FROM m_order
                 LEFT JOIN m_item ON (m_order.items = m_item.id)
        WHERE m_item.store_id = #{store_id}
        LIMIT ${offset}, ${limit}
    </select>

    <insert id="addOrder">
        INSERT INTO m_order (items, account_id, store_id, total_price)
        VALUES (#{items}, #{account_id}, ${store_id}, ${total_price})
    </insert>

    <update id="updateOrderStar">
        UPDATE m_order
        SET star = #{star}
        WHERE id = #{id};
    </update>

    <update id="updateOrderRemark">
        UPDATE m_order
        SET remark = #{remark}
        WHERE id = #{id};
    </update>

    <update id="updateOrderStatus">
        UPDATE m_order
        SET order_status = #{order_status}
        WHERE id = #{id};
    </update>

    <select id="getHistoryOrder" resultType="Order">
        SELECT m_order.*, m_account.username, m_store.store_name, m_store.store_img
        FROM m_order
                 LEFT JOIN m_account ON (m_order.account_id = m_account.id)
                 LEFT JOIN m_store ON (m_order.store_id = m_store.id)
        WHERE order_status = 5
        LIMIT #{offset}, #{limit}
    </select>

    <delete id="delOrder">
        DELETE
        FROM m_order
        WHERE id = #{id};
    </delete>

    <select id="getStoreStar" resultType="StoreStar">
        SELECT COUNT(*) as total_remark, AVG(star) AS avg_star, AVG(total_price) as avg_price
        FROM m_order
        WHERE store_id = #{store_id} AND order_status = 5;
    </select>

    <select id="getRemarkOrderByDate" resultType="UserRemark">
        SELECT m_account.account_img, m_account.username, m_order.star, m_order.remark, m_order.created_at
        FROM m_order
                 LEFT JOIN m_account ON (m_account.id = m_order.account_id)
        WHERE store_id = #{store_id} AND order_status = 5
        ORDER BY m_order.created_at DESC
        LIMIT ${offset}, ${limit}
    </select>

    <select id="getRemarkOrderByStar" resultType="UserRemark">
        SELECT m_account.account_img, m_account.username, m_order.star, m_order.remark, m_order.created_at
        FROM m_order
                 LEFT JOIN m_account ON (m_account.id = m_order.account_id)
        WHERE store_id = #{store_id}  AND order_status = 5
        ORDER BY m_order.star DESC
        LIMIT ${offset}, ${limit}
    </select>

    <select id="getRemarkInfo" resultType="Integer">
        SELECT star FROM m_order WHERE store_id = #{store_id};
    </select>
</mapper>